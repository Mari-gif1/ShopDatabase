@page "/books/create/"
@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository _repo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload
@inject NavigationManager _navManager
@inject IToastService _toastService

@using Microsoft.WindowsAzure.Storage
@using Microsoft.WindowsAzure.Storage.Blob

<h3>Create Book</h3>
<hr />
<br />
@if (!isSuccess)
{
    <ErrorMessage Message="Something Went Wrong With the Operation" />
}

<EditForm Model="Model" OnValidSubmit="OnUpdate">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Book Title</label>
        <InputText @bind-Value="Model.Title" class="form-control" id="title" />
    </div>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber @bind-Value="Model.Cost" class="form-control" id="price" />
    </div>
    <div class="form-group">
        <label for="author">Authors</label>
         <InputText @bind-Value="Model.Author" class="form-control" id="author" />
@*        <select @bind="Model.Author" class="form-control" id="author">
            <option value="">-- Select Author --</option>
            @if (Authors != null)
            {
                foreach (var author in Authors)
                {
                    <option value="@author.Id">@author.Firstname @author.Lastname</option>
                }
            }
        </select>*@
    </div>
    <div class="form-group">
        <label for="genre">Genre</label>
        <InputText @bind-Value="Model.Genre" class="form-control" id="genre" />
    </div>
    <div class="form-group">
        <label for="publishyear">Publish Year</label>
        <InputNumber @bind-Value="Model.PublishYear" class="form-control" id="year" />
    </div>
    <div class="form-group">
        <label for="bookcover">Book Cover Photo</label>
@*        <InputFile OnChange="HandleFileSelection" />
        @if (isInvalidFileType)
        {
            <ErrorMessage Message="Please remove the invalid file type and select as new image, or leave this field blank" />
        }
        @if (!string.IsNullOrWhiteSpace(imageDataURL))
        {
            <img src="@imageDataURL" style="height:100px;width:100px" />
        }*@
        <InputFile class="form-control" OnChange="GetFile" />
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Add Book
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>

@code {
    private Book Model = new Book();
    static int id = 0;
    private IList<Author> Authors;
    private IBrowserFile file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private string imageDataURL;
    private Stream msFile;

    private IBrowserFile File;

    protected override async Task OnInitializedAsync()
    {
        //Authors = await _authorRepo.Get(Endpoints.AuthorsEndpoint);
    }

    public async Task OnUpdate()
       {
        try
        {
            if (File != null) 
            {
                Configurations.BlobStorageConnectionString = "DefaultEndpointsProtocol=https;AccountName=bookstorageazure;AccountKey=lUOl5SqmlZFjiAs1L5LtZe8y/wvmOUqLkpJBOLhxywYqZMyh9KWFKEoDGVO1Ytsj/D0EC2Dz+cUo+ASt+46w7w==;EndpointSuffix=core.windows.net";
                CloudStorageAccount storage = CloudStorageAccount.Parse(Configurations.BlobStorageConnectionString);
                CloudBlobClient client = storage.CreateCloudBlobClient();

                CloudBlobContainer container = client.GetContainerReference("bookimages");

                CloudBlockBlob blockBlob = container.GetBlockBlobReference($"image{++id}");

                    
                await blockBlob.UploadFromStreamAsync(File.OpenReadStream());
                await blockBlob.SetStandardBlobTierAsync(StandardBlobTier.Cool);

                if (!string.IsNullOrEmpty(blockBlob.Uri.ToString()))
                {
                    Model.ImageURL = blockBlob.Uri.ToString();
                }
            }
                
            await _repo.Create(Endpoints.BooksEndpoint, Model);
            _toastService.ShowWarning("Author Updated Successfully", "");
            BackToList();
        }
        catch (Exception ex) 
        {
            //
        }
    }

    private async Task HandleCreate()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                await _fileUpload.UploadFile(msFile, picName);

                Model.ImageURL = picName;
            }

            isSuccess = await _repo.Create(Endpoints.BooksEndpoint, Model);
            if (isSuccess)
            {
                _toastService.ShowSuccess("Book Created Successfully", "");
                BackToList();
            }
        }
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        file = e.File;
        if (file != null)
        {
            var ext = Path.GetExtension(file.Name); 
            if (ext.Contains("jpg") || ext.Contains("png") || ext.Contains("jpeg"))
            {
                msFile = file.OpenReadStream();

                var resizedImageFile = await file.RequestImageFileAsync("image/png",
            100, 100);

                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);

                var imageBase64Data = Convert.ToBase64String(buffer);
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }


    private void BackToList()
    {
        _navManager.NavigateTo("/books/");
    }

    public void GetFile(InputFileChangeEventArgs e)
    {
        File = e.File;
    }
}
